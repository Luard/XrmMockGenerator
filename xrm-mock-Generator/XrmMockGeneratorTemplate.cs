// ------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del runtime: 16.0.0.0
//  
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace xrm_mock_Generator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using System.IO;
    using xrm_mock_Generator.Model;
    using xrm_mock_Generator.Model.Control;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class XrmMockGeneratorTemplate : XrmMockGeneratorTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"import { UserSettingsMock, EntityMock, ContextMock, IContextComponents, ClientContextMock, IXrmGeneratorComponents, XrmMockGenerator, IEntityComponents, ItemCollectionMock, UiMock, FormSelectorMock, FormItemMock, ControlMock, OptionSetValueMock, IUiComponents, IOptionSetAttributeComponents, OptionSetAttributeMock, IDateAttributeComponents, INumberAttributeComponents, NumberAttributeMock, ILookupAttributeComponents, LookupAttributeMock, StringAttributeMock, IStringAttributeComponents, DateAttributeMock, IBooleanAttributeComponents, BooleanAttributeMock } from ""xrm-mock"";");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write(@"
import { CrmService, CrmConnectionConfig } from ""node-dcrm-service"";
import * as sinon from ""sinon"";

var jsdom = require(""jsdom"");
const { JSDOM } = jsdom;
const { window } = new JSDOM();
const { document } = (new JSDOM('')).window;
global[""document""] = document;
global[""$""] = global[""jQuery""] = require(""jquery"")(window);
");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n\n\n/**\n * Model generated by the \"xrm-mock Generator\" tool available in the XrmTo" +
                    "olBox or as the NuGet package \"xrm-mock-Generator\"\n */\nexport namespace XrmModel" +
                    "\n{\n\tabstract class CrmEntityModel<TFormNames>\n\t{\n\t\tabstract entityName: string;\n" +
                    "\t\tabstract context: Context;\n\t\tabstract crmAttributes: CrmAttribute[];\n\t\tabstrac" +
                    "t forms: Form[];\n\t\tactiveForm: TFormNames;\n\t}\n\n\tinterface IHasId { id: string; }" +
                    "\n\tinterface IHasLabels { labels: Map<number, string>; }\n\tinterface ICanVisible {" +
                    " isVisible: boolean; }\n\tinterface ICanDisabled { isDisabled: boolean; }\n\n\tclass " +
                    "Form implements IHasId\n\t{\n\t\tid: string;\n\t\tname: string;\n\t\ttabs: Tab[];\n\n\t\tconstr" +
                    "uctor(obj: Form)\n\t\t{\n\t\t\tObject.assign<Form, Form>(this, obj);\n\t\t}\n\t}\n\n\tclass Tab" +
                    " implements IHasId, IHasLabels, ICanVisible\n\t{\n\t\tid: string;\n\t\tlabels: Map<numbe" +
                    "r, string>;\n\t\tisVisible: boolean;\n\t\tsections: Section[];\n\n\t\tconstructor(obj: Tab" +
                    ")\n\t\t{\n\t\t\tObject.assign<Tab, Tab>(this, obj);\n\t\t}\n\t}\n\n\tclass Section implements I" +
                    "HasId, IHasLabels, ICanVisible\n\t{\n\t\tid: string;\n\t\tlabels: Map<number, string>;\n\t" +
                    "\tisVisible: boolean;\n\t\tcontrols: Control[];\n\n\t\tconstructor(obj: Section)\n\t\t{\n\t\t\t" +
                    "Object.assign<Section, Section>(this, obj);\n\t\t}\n\t}\n\n\tclass CrmAttribute\n\t{\n\t\tatt" +
                    "ributeType: string;\n\t\tname: string;\n\t\trequiredLevel: string;\n\t\tformat: string;\n\t" +
                    "\toptions: Map<number, Map<number, string>>;\n\t\tmin: number;\n\t\tmax: number;\n\t\tprec" +
                    "ision: number;\n\t\tmaxLength: number;\n\t\tdefaultBoolValue: boolean;\n\t\tinitialValue:" +
                    " number;\n        \n\t\tconstructor(obj: CrmAttribute)\n\t\t{\n\t\t\tObject.assign<CrmAttri" +
                    "bute, CrmAttribute>(this, obj);\n\t\t}\n\t}\n\n\tabstract class Control implements IHasL" +
                    "abels, ICanVisible\n\t{\n\t\tname: string;\n\t\tlabels: Map<number, string>;\n\t\tisVisible" +
                    ": boolean;\n\n\t\tconstructor(obj: Control)\n\t\t{\n\t\t\tObject.assign<Control, Control>(t" +
                    "his, obj);\n\t\t}\n\t}\n\n\tclass FieldControl extends Control implements ICanDisabled\n\t" +
                    "{\n\t\tisDisabled: boolean;\n\n\t\tconstructor(obj: FieldControl)\n\t\t{\n\t\t\tsuper(obj);\n\t\t" +
                    "\tObject.assign<FieldControl, FieldControl>(this, obj);\n\t\t}\n\t}\n\n\tclass GridContro" +
                    "l extends Control\n\t{\n\t\tconstructor(obj: GridControl)\n\t\t{\n\t\t\tsuper(obj);\n\t\t\tObjec" +
                    "t.assign<GridControl, GridControl>(this, obj);\n\t\t}\n\t}\n\n\tclass Context\n\t{ \n\t\tuser" +
                    "Id: string;\n\t\tusername: string;\n\t\tuserFullName: string;\n\t\tisGuidedHelpEnabled: b" +
                    "oolean;\n\t\tuserLanguageCode: number;\n\t\ttimeZoneBias: number;\n\t\tuserRoles: string[" +
                    "];\n\t\torganisationUrl: string;\n\t\tisAutoSaveEnabled: boolean;\n\t\torgLanguageCode: n" +
                    "umber;\n\t\torganisationName: string;\n\t\tthemeName: string;\n\t\tcrmVersion: string;\n\n\t" +
                    "\tconstructor(obj: Context)\n\t\t{\n\t\t\tObject.assign<Context, Context>(this, obj);\n\t\t" +
                    "}\n\t}\n\n\texport class ContextParams\n\t{\n\t\tclient: Xrm.Client;\n\t\tclientState: Xrm.Cl" +
                    "ientState;\n\t\tuserSettings: UserSettingsMock;\n\t}\n\n\texport class ModelBuilder<TEnt" +
                    "ity extends CrmEntityModel<string>>\n\t{\n\t\tprivate recordId: string;\n\t\tprivate ent" +
                    "ity: EntityMock;\n\t\tprivate context: ContextMock;\n\t\tprivate ui: UiMock;\n\t\tprivate" +
                    " attributes: Xrm.Attributes.Attribute[] = [];\n\t\tprivate form: Form;\n\n\t\tprivate f" +
                    "ormType: XrmEnum.FormType\n\t\tprivate isBuilt: boolean;\n\n");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write("\n\t\tprivate crmService: CrmService\n");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 } 
            // TO-DO: Remove <unknown> when fixed
            #line default
            #line hidden
            this.Write("\n    \n\t\tconstructor(private rawModel: TEntity, recordId: string = \"00000000-0000-" +
                    "0000-0000-000000000000\")\n\t\t{\n\t\t\tthis.recordId = recordId;\n\t\t\tthis.form = this.ra" +
                    "wModel.forms.find(form => true);\n\t\t}\n\n\t\tselectForm(formName: TEntity[\"activeForm" +
                    "\"])\n\t\t{\n\t\t\tif (this.isBuilt)\n\t\t\t{\n\t\t\t\tthrow new Error(\"Model already built.\");\n\t" +
                    "\t\t}\n\n\t\t\tthis.form = this.rawModel.forms.find(form => form.name === formName);\n\t\t" +
                    "}\n\n\t\tbuildContext(parameters_url?: ContextMock | ContextParams | string, url?: s" +
                    "tring)\n\t\t{\n\t\t\tif (this.isBuilt)\n\t\t\t{\n\t\t\t\tthrow new Error(\"Model already built.\")" +
                    ";\n\t\t\t}\n\n\t\t\tconst rawContext = this.rawModel.context;\n\n\t\t\tif (parameters_url == n" +
                    "ull || typeof(parameters_url) === \"string\")\n\t\t\t{\n\t\t\t\tthis.context = new ContextM" +
                    "ock(<IContextComponents>\n\t\t\t\t\t<unknown>{\n\t\t\t\t\t\tclientContext: new ClientContextMock(\"Web\"" +
                    ", \"Online\"),\n\t\t\t\t\t\tuserSettings: new UserSettingsMock(\n\t\t\t\t\t\t\t<UserSettingsMock>" +
                    "\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tisGuidedHelpEnabled: rawContext.isGuidedHelpEnabled,\n\t\t\t\t\t\t\t\ti" +
                    "sHighContrastEnabled: false,\n\t\t\t\t\t\t\t\tisRTL: false,\n\t\t\t\t\t\t\t\tuserId: rawContext.us" +
                    "erId,\n\t\t\t\t\t\t\t\tuserName: rawContext.username,\n\t\t\t\t\t\t\t\tlanguageId: rawContext.user" +
                    "LanguageCode,\n\t\t\t\t\t\t\t\tsecurityRoles: rawContext.userRoles\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tclien" +
                    "tUrl: rawContext.organisationUrl || parameters_url,\n\t\t\t\t\t\tcurrentTheme: rawConte" +
                    "xt.themeName,\n\t\t\t\t\t\tisAutoSaveEnabled: rawContext.isAutoSaveEnabled,\n\t\t\t\t\t\torgLc" +
                    "id: rawContext.orgLanguageCode,\n\t\t\t\t\t\torgUniqueName: rawContext.organisationName" +
                    ",\n\t\t\t\t\t\ttimeZoneOffset: rawContext.timeZoneBias,\n\t\t\t\t\t\tuserId: rawContext.userId" +
                    ",\n\t\t\t\t\t\tuserLcid: rawContext.userLanguageCode,\n\t\t\t\t\t\tuserName: rawContext.userFu" +
                    "llName,\n\t\t\t\t\t\tuserRoles: rawContext.userRoles,\n\t\t\t\t\t\tversion: rawContext.crmVers" +
                    "ion\n\t\t\t\t\t});\n\t\t\t}\n\t\t\telse if (parameters_url instanceof ContextMock)\n\t\t\t{\n\t\t\t\tth" +
                    "is.context = parameters_url;\n\t\t\t}\n\t\t\telse if (parameters_url instanceof ContextP" +
                    "arams)\n\t\t\t{\n\t\t\t\tconst parameters = <ContextParams>parameters_url;\n\n\t\t\t\tthis.cont" +
                    "ext = new ContextMock(<IContextComponents>\n\t\t\t\t\t<unknown>{\n\t\t\t\t\t\tclientContext: new Clien" +
                    "tContextMock(parameters.client, parameters.clientState),\n\t\t\t\t\t\tuserSettings: par" +
                    "ameters.userSettings,\n\t\t\t\t\t\tclientUrl: rawContext.organisationUrl || url,\n\t\t\t\t\t\t" +
                    "currentTheme: rawContext.themeName,\n\t\t\t\t\t\tisAutoSaveEnabled: rawContext.isAutoSa" +
                    "veEnabled,\n\t\t\t\t\t\torgLcid: rawContext.orgLanguageCode,\n\t\t\t\t\t\torgUniqueName: rawCo" +
                    "ntext.organisationName,\n\t\t\t\t\t\ttimeZoneOffset: rawContext.timeZoneBias,\n\t\t\t\t\t\tuse" +
                    "rId: parameters.userSettings.userId,\n\t\t\t\t\t\tuserLcid: parameters.userSettings.lan" +
                    "guageId,\n\t\t\t\t\t\tuserName: parameters.userSettings.userName,\n\t\t\t\t\t\tuserRoles: para" +
                    "meters.userSettings.securityRoles,\n\t\t\t\t\t\tversion: rawContext.crmVersion\n\t\t\t\t\t});" +
                    "\n\t\t\t}\n\t\t}\n\n\t\tbuildModel(): void\n\t\t{\n\t\t\tif (this.isBuilt)\n\t\t\t{\n\t\t\t\tthrow new Erro" +
                    "r(\"Model already built.\");\n\t\t\t}\n\n\t\t\tif (this.context == null)\n\t\t\t{\n\t\t\t\tthis.buil" +
                    "dContext();\n\t\t\t}\n\n\t\t\tthis.buildAttributes();\n\t\t\tthis.buildEntity();\n\t\t\tthis.buil" +
                    "dUi();\n\n\t\t\tXrmMockGenerator.initialise(<IXrmGeneratorComponents>\n\t\t\t\t{\n\t\t\t\t\tenti" +
                    "ty: this.entity,\n\t\t\t\t\tui: this.ui,\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tprocess: nul" +
                    "l\n\t\t\t\t});\n\n\t\t\tthis.buildTabs();\n\n\t\t\tthis.isBuilt = true;\n\t\t}\n\n");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write(@"
		enableOnlineWebApi(config: CrmConnectionConfig): Promise<CrmService>
		{
			if (!this.isBuilt)
			{
				throw new Error(""Model must be built first before enabling online connection."");
			}

			this.crmService = new CrmService(config);

			this.setupXrmWebApiMocks();
			this.setupJqueryMocks(config);

			return this.crmService.initialise().then(e => this.crmService);
		}
 ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\n   \n\t\tprivate buildAttributes(): void\n\t\t{\n\t\t\tfor (const attribute of this.rawMod" +
                    "el.crmAttributes)\n\t\t\t{\n\t\t\t\tconst attributeType = attribute.attributeType;\n\t\t\t\tco" +
                    "nst params =\n\t\t\t\t{\n\t\t\t\t\tname: attribute.name,\n\t\t\t\t\tattributeType: attribute.attr" +
                    "ibuteType,\n\t\t\t\t\trequiredLevel: attribute.requiredLevel,\n\t\t\t\t\tformat: attribute.f" +
                    "ormat\n\t\t\t\t};\n\t\t\t\tlet attributeMock;\n\n\t\t\t\tswitch (attributeType)\n\t\t\t\t{\n\t\t\t\t\tcase " +
                    "\"optionset\":\n\t\t\t\t\t\tconst optionsMock: OptionSetValueMock[] = []\n\t\t\t\t\t\tattribute." +
                    "options.forEach((value, key) => { optionsMock.push(new OptionSetValueMock(value." +
                    "get(this.context.userLcid), key)) });\n\t\t\t\t\t\tconst optionSetParams = <IOptionSetA" +
                    "ttributeComponents>params;\n\t\t\t\t\t\toptionSetParams.options = optionsMock;\n\t\t\t\t\t\top" +
                    "tionSetParams.initialValue = attribute.initialValue;\n\t\t\t\t\t\tattributeMock = new O" +
                    "ptionSetAttributeMock(optionSetParams);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"datetime\":\n\t\t\t\t\t" +
                    "\tattributeMock = new DateAttributeMock(<IDateAttributeComponents>params);\n\t\t\t\t\tc" +
                    "ase \"integer\":\n\t\t\t\t\tcase \"double\":\n\t\t\t\t\tcase \"decimal\":\n\t\t\t\t\tcase \"money\":\n\t\t\t\t\t" +
                    "\tconst numberParams = <INumberAttributeComponents>params;\n\t\t\t\t\t\tnumberParams.min" +
                    " = attribute.min;\n\t\t\t\t\t\tnumberParams.max = attribute.max;\n\t\t\t\t\t\tnumberParams.pre" +
                    "cision = attribute.precision;\n\t\t\t\t\t\tattributeMock = new NumberAttributeMock(numb" +
                    "erParams);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"lookup\":\n\t\t\t\t\t\tconst lookupParams = <ILookupA" +
                    "ttributeComponents>params;\n\t\t\t\t\t\tlookupParams.isPartyList = null;\n\t\t\t\t\t\tattribut" +
                    "eMock = new LookupAttributeMock(lookupParams);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n" +
                    "\t\t\t\t\tcase \"memo\":\n\t\t\t\t\t\tconst stringParams = <IStringAttributeComponents>params;" +
                    "\n\t\t\t\t\t\tstringParams.maxLength = attribute.maxLength;\n\t\t\t\t\t\tattributeMock = new S" +
                    "tringAttributeMock(stringParams);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\tconst " +
                    "booleanParams = <IBooleanAttributeComponents>params;\n\t\t\t\t\t\tbooleanParams.initial" +
                    "Value = attribute.defaultBoolValue;\n\t\t\t\t\t\tattributeMock = new BooleanAttributeMo" +
                    "ck(booleanParams);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log(`WARNING: Adding" +
                    " attribute \'${attribute.name}\' as String attribute due to unsupported \'${attribu" +
                    "teType}\' type.`);\n\t\t\t\t\t\tconst defaultParams = <IStringAttributeComponents>params" +
                    ";\n\t\t\t\t\t\tattributeMock = new StringAttributeMock(defaultParams);\n\t\t\t\t}\n\n\t\t\t\tthis." +
                    "attributes.push(attributeMock);\n\t\t\t}\n\t\t}\n\n\t\tprivate buildEntity(): void\n\t\t{\n\t\t\tt" +
                    "his.entity = new EntityMock(<IEntityComponents>\n\t\t\t\t{\n\t\t\t\t\tentityName: `${this.r" +
                    "awModel.entityName}`,\n\t\t\t\t\tid: `{${this.recordId}}`,\n\t\t\t\t\tattributes: new ItemCo" +
                    "llectionMock<Xrm.Attributes.Attribute>(this.attributes)\n\t\t\t\t});\n\t\t}\n\n\t\tprivate b" +
                    "uildUi(): void\n\t\t{\n\t\t\tthis.ui = new UiMock(<IUiComponents>\n\t\t\t\t{\n\t\t\t\t\tformSelect" +
                    "or: new FormSelectorMock(new ItemCollectionMock<FormItemMock>(\n\t\t\t\t\t\tthis.rawMod" +
                    "el.forms.map(form =>\n\t\t\t\t\t\t\tnew FormItemMock(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcurrentItem: fo" +
                    "rm.id === this.form.id,\n\t\t\t\t\t\t\t\t\tformType: this.formType,\n\t\t\t\t\t\t\t\t\tid: form.id,\n" +
                    "\t\t\t\t\t\t\t\t\tlabel: form.name,\n\t\t\t\t\t\t\t\t}))))\n\t\t\t\t});\n\t\t}\n\n\t\tprivate buildTabs(): voi" +
                    "d\n\t\t{\n\t\t\tfor (const tab of this.form.tabs) \n\t\t\t{\n\t\t\t\tXrmMockGenerator.Tab.create" +
                    "Tab(tab.id, tab.labels.get(this.context.userLcid), tab.isVisible, \"collapsed\", n" +
                    "ull,\n\t\t\t\t\tnew ItemCollectionMock<Xrm.Controls.Section>(this.buildSections(tab)))" +
                    ";\n\t\t\t}\n\t\t}\n\n\t\tprivate buildSections(tab: Tab): Xrm.Controls.Section[]\n\t\t{\n\t\t\tcon" +
                    "st sections: Xrm.Controls.Section[] = [];\n\n\t\t\tfor (const section of tab.sections" +
                    ")\n\t\t\t{\n\t\t\t\tsections.push(\n\t\t\t\t\tXrmMockGenerator.Section.createSection(section.id" +
                    ", section.labels.get(this.context.userLcid), section.isVisible, null,\n\t\t\t\t\t\tnew " +
                    "ItemCollectionMock<Xrm.Controls.Control>(this.buildControls(section))));\n\t\t\t}\n\n\t" +
                    "\t\treturn sections;\n\t\t}\n\n\t\tprivate buildControls(section: Section): Xrm.Controls." +
                    "Control[]\n\t\t{\n\t\t\tconst controls: Xrm.Controls.Control[] = [];\n\n\t\t\tfor (const con" +
                    "trol of section.controls)\n\t\t\t{\n\t\t\t\tconst controlParams: any = { name: control.na" +
                    "me, label: control.labels.get(this.context.userLcid), visible: control.isVisible" +
                    " };\n\t\t\t\tlet controlMock: ControlMock;\n\n\t\t\t\tif (control instanceof GridControl)\n\t" +
                    "\t\t\t{\n\t\t\t\t\tcontrolParams.entityName = this.entity;\n\t\t\t\t\tcontrolMock = XrmMockGene" +
                    "rator.Control.createGrid(controlParams);\n\t\t\t\t}\n\t\t\t\telse if (control instanceof F" +
                    "ieldControl)\n\t\t\t\t{\n\t\t\t\t\tconst attribute = this.attributes.find(attribute => attr" +
                    "ibute.getName() === control.name);\n\n\t\t\t\t\tconst missingAttributeMessage = `WARNIN" +
                    "G: Skipped adding control \'${control.name}\' due to missing attribute.`;\n\n\t\t\t\t\tif" +
                    " (!attribute)\n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.log(missingAttributeMessage);\n\t\t\t\t\t\tcontinue;" +
                    "\n\t\t\t\t\t}\n\n\t\t\t\t\tcontrolParams.attribute = attribute;\n\n\t\t\t\t\tconst fieldcontrol = <F" +
                    "ieldControl>control;\n\t\t\t\t\tcontrolParams.disabled = fieldcontrol.isDisabled\n\n\t\t\t\t" +
                    "\tconst rawAttribute = this.rawModel.crmAttributes.find(attribute => attribute.na" +
                    "me === control.name);\n\n\t\t\t\t\tif (!rawAttribute)\n\t\t\t\t\t{\n\t\t\t\t\t\tconsole.log(missingA" +
                    "ttributeMessage);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst attributeType = rawAttribut" +
                    "e.attributeType;\n\n\t\t\t\t\tswitch (attributeType)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase \"optionset\":\n\t\t\t" +
                    "\t\t\t\tconst optionsMock: OptionSetValueMock[] = []\n\t\t\t\t\t\t\trawAttribute.options.for" +
                    "Each((value, key) => { optionsMock.push(new OptionSetValueMock(value.get(this.co" +
                    "ntext.userLcid), key)) });\n\t\t\t\t\t\t\tcontrolParams.options = optionsMock;\n\t\t\t\t\t\t\tco" +
                    "ntrolMock = XrmMockGenerator.Control.createOptionSet(controlParams);\n\t\t\t\t\t\t\tbrea" +
                    "k;\n\t\t\t\t\t\tcase \"datetime\":\n\t\t\t\t\t\t\tcontrolParams.showTime = attribute.getFormat() " +
                    "=== \"datetime\";\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.createDate(control" +
                    "Params);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"integer\":\n\t\t\t\t\t\tcase \"double\":\n\t\t\t\t\t\tcase \"de" +
                    "cimal\":\n\t\t\t\t\t\tcase \"money\":\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.create" +
                    "Number(controlParams);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"lookup\":\n\t\t\t\t\t\t\tcontrolMock = X" +
                    "rmMockGenerator.Control.createLookup(controlParams);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"s" +
                    "tring\":\n\t\t\t\t\t\tcase \"memo\":\n\t\t\t\t\t\t\tcontrolMock = XrmMockGenerator.Control.createS" +
                    "tring(controlParams);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\tcontrolMock = X" +
                    "rmMockGenerator.Control.createBoolean(controlParams);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefaul" +
                    "t:\n\t\t\t\t\t\t\tconsole.log(`WARNING: Adding control \'${control.name}\' as String contr" +
                    "ol due to unsupported \'${attributeType}\' type.`);\n\t\t\t\t\t\t\tcontrolMock = XrmMockGe" +
                    "nerator.Control.createString(controlParams);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcontrols.push(con" +
                    "trolMock);\n\t\t\t}\n\n\t\t\treturn controls;\n\t\t}\n\n");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 if(templateModel.IsGenerateOnlineCode == true) { 
            
            #line default
            #line hidden
            this.Write("\n\t\tprivate retrieveEntityWebApiName =\n\t\t\t(logicalName: string): Promise<string> =" +
                    ">\n\t\t\t\t<any> this.crmService.get(`EntityDefinitions(LogicalName=\'${logicalName}\')" +
                    "?$select=LogicalCollectionName`)\n\t\t\t\t\t.then(e => e.body.LogicalCollectionName);\n" +
                    "\n\t\tprivate setupXrmWebApiMocks()\n\t\t{\n\t\t\tsinon.stub(Xrm.WebApi, \"createRecord\").c" +
                    "allsFake((entityLogicalName: string, data: any) => <any> this.retrieveEntityWebA" +
                    "piName(entityLogicalName)\n\t\t\t\t.then(webApiName => this.crmService.post(`${webApi" +
                    "Name}`, data)\n\t\t\t\t\t.then(e => new RegExp(`${webApiName}\\\\((.*?)\\\\)`).exec(e.head" +
                    "ers[\"odata-entityid\"])[1])));\n\t\t\tsinon.stub(Xrm.WebApi, \"updateRecord\").callsFak" +
                    "e((entityLogicalName: string, id: string, data: any) => <any> this.retrieveEntit" +
                    "yWebApiName(entityLogicalName)\n\t\t\t\t.then(webApiName => this.crmService.patch(`${" +
                    "webApiName}(${id})`, data)\n\t\t\t\t\t.then(e => new RegExp(`${webApiName}\\\\((.*?)\\\\)`" +
                    ").exec(e.headers[\"odata-entityid\"])[1])));\n\t\t\tsinon.stub(Xrm.WebApi, \"deleteReco" +
                    "rd\").callsFake((entityLogicalName: string, id: string) => <any> this.retrieveEnt" +
                    "ityWebApiName(entityLogicalName)\n\t\t\t\t.then(webApiName => this.crmService.delete(" +
                    "`${webApiName}(${id})`)\n\t\t\t\t\t.then(e => id)));\n\t\t\tsinon.stub(Xrm.WebApi, \"retrie" +
                    "veRecord\").callsFake((entityLogicalName: string, id: string, options?: string) =" +
                    "> <any> this.retrieveEntityWebApiName(entityLogicalName)\n\t\t\t\t.then(webApiName =>" +
                    " this.crmService.get(`${webApiName}(${id})${options}`)\n\t\t\t\t\t.then(e => e.body)))" +
                    ";\n\t\t\tsinon.stub(Xrm.WebApi, \"retrieveMultipleRecords\").callsFake((entityLogicalN" +
                    "ame: string, options?: string, maxPageSize?: number) => <any> this.retrieveEntit" +
                    "yWebApiName(entityLogicalName)\n\t\t\t\t.then(webApiName => this.crmService.get(`${we" +
                    "bApiName}${options}`, new Map<string, string>([[\"Prefer\", `odata.maxpagesize=${m" +
                    "axPageSize ? maxPageSize : 5000}`]]))\n\t\t\t\t\t.then(e => <Xrm.RetrieveMultipleResul" +
                    "t>{ entities: e.body.value, nextLink: e.body[\"@odata.nextLink\"] })));\n\t\t}\n\n\t\tpri" +
                    "vate setupJqueryMocks(config: CrmConnectionConfig)\n\t\t{\n\t\t\tconst createJqueryStub" +
                    "Promise =\n\t\t\t\t(method, url, data?, successCallback?, errorCallback?): any =>\n\t\t\t" +
                    "\t{\n\t\t\t\t\tconst deferred = $.Deferred();\n\n\t\t\t\t\tlet dataProcessed;\n\n\t\t\t\t\tif (data)\n" +
                    "\t\t\t\t\t{\n\t\t\t\t\t\tdataProcessed = (data as string) ? JSON.parse(<string>data) : data;" +
                    "\n\t\t\t\t\t}\n\n\t\t\t\t\tvar processedUrl = url.replace(config.baseUrl, \'\').replace(config." +
                    "urlPrefix, \'\').replace(/^\\/+|\\/+$/g, \'\');\n\n\t\t\t\t\tthis.crmService[method](processe" +
                    "dUrl, dataProcessed)\n\t\t\t\t\t\t.then(e =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst xhr =\n\t\t\t\t\t\t\t\t<JQuery" +
                    ".jqXHR>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstatus: e.statusCode, statusText: e.statusCodeMessage" +
                    ",\n\t\t\t\t\t\t\t\t\tgetResponseHeader: name => e.headers[name.toLowerCase()]\n\t\t\t\t\t\t\t\t};\n\n" +
                    "\t\t\t\t\t\t\tif (successCallback)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t(<any>successCallback)(e.body, \"suc" +
                    "cess\", xhr);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdeferred.resolve(e.body, \"success\", xhr);\n\t\t\t\t\t\t})" +
                    "\n\t\t\t\t\t\t.catch(e =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet errorObject;\n\n\t\t\t\t\t\t\ttry \n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t" +
                    "\terrorObject = JSON.parse(e.text);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (e) { }\n\n\t\t\t\t\t\t\tconst x" +
                    "hr =\n\t\t\t\t\t\t\t\t<JQuery.jqXHR>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstatus: e.statusCode, statusText:" +
                    " e.statusCodeMessage,\n\t\t\t\t\t\t\t\t\tresponseText: e.text, responseJSON: errorObject,\n" +
                    "\t\t\t\t\t\t\t\t\tgetResponseHeader: name => e.headers[name.toLowerCase()]\n\t\t\t\t\t\t\t\t};\n\n\t\t" +
                    "\t\t\t\t\tif (errorCallback)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t(<any>errorCallback)(xhr, \"error\", e.st" +
                    "atusCodeMessage);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdeferred.reject(xhr, \"error\", e.statusCodeMes" +
                    "sage);\n\t\t\t\t\t\t});\n\n\n\t\t\t\t\treturn deferred.promise();\n\t\t\t\t};\n\n\t\t\tsinon.stub($, \"aja" +
                    "x\").callsFake(\n\t\t\t// @ts-ignore\n\t\t\t\t(ajaxSettings_url: string | JQuery.AjaxSetti" +
                    "ngs, ajaxSettings: JQuery.AjaxSettings) =>\n\t\t\t\t{\n\t\t\t\t\tif (typeof (ajaxSettings_u" +
                    "rl) === \"string\")\n\t\t\t\t\t{\n\t\t\t\t\t\tajaxSettings.url = ajaxSettings_url;\n\t\t\t\t\t}\n\t\t\t\t\t" +
                    "else\n\t\t\t\t\t{\n\t\t\t\t\t\tajaxSettings = ajaxSettings_url;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn createJqu" +
                    "eryStubPromise((ajaxSettings.method || ajaxSettings.type).toLowerCase(),\n\t\t\t\t\t\ta" +
                    "jaxSettings.url, ajaxSettings.data, ajaxSettings.success, ajaxSettings.error)\n\t\t" +
                    "\t\t});\n\n\t\t\t// @ts-ignore\n\t\t\tsinon.stub($, \"getJSON\").callsFake((url: string,\n\t\t\t\t" +
                    "success_data: JQuery.jqXHR.DoneCallback | JQuery.PlainObject | string,\n\t\t\t\tsucce" +
                    "ss: JQuery.jqXHR.DoneCallback) =>\n\t\t\t\tcreateJqueryStubPromise(\"get\", url,\n\t\t\t\t\tt" +
                    "ypeof (success_data) === \"function\" ? null : success_data,\n\t\t\t\t\ttypeof (success_" +
                    "data) === \"function\" ? success_data : success));\n\n\t\t\tconst getPostMock =\n\t\t\t\t(ur" +
                    "l_settings: string | JQuery.UrlAjaxSettings,\n\t\t\t\t\tsuccess_data: JQuery.jqXHR.Don" +
                    "eCallback | JQuery.PlainObject | string,\n\t\t\t\t\tdataType_success?: string | JQuery" +
                    ".jqXHR.DoneCallback,\n\t\t\t\t\tsuccess?: JQuery.jqXHR.DoneCallback, method?: string) " +
                    "=>\n\t\t\t\t{\n\t\t\t\t\tconst settings =\n\t\t\t\t\t\ttypeof (url_settings) === \"string\"\n\t\t\t\t\t\t\t?" +
                    " <JQuery.UrlAjaxSettings>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: method || \"get\",\n\t\t\t\t\t\t\t\turl:" +
                    " url_settings as string\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: url_settings;\n\n\t\t\t\t\treturn createJquer" +
                    "yStubPromise((settings.method || settings.type).toLowerCase(),\n\t\t\t\t\t\tsettings.ur" +
                    "l,\n\t\t\t\t\t\ttypeof (success_data) === \"function\" ? (typeof (dataType_success) === \"" +
                    "string\" ? dataType_success : null) : success_data,\n\t\t\t\t\t\ttypeof (success_data) =" +
                    "== \"function\" ? success_data : typeof (dataType_success) === \"string\" ? success " +
                    ": dataType_success,\n\t\t\t\t\t\tsettings.error)\n\t\t\t\t};\n\n\t\t\t// @ts-ignore\n\t\t\tsinon.stub" +
                    "($, \"get\").callsFake((url_settings, success_data, dataType_success, success) =>\n" +
                    "\t\t\t\tgetPostMock(url_settings, success_data, dataType_success, success, \"get\"));\n" +
                    "\t\t\t// @ts-ignore\n\t\t\tsinon.stub($, \"post\").callsFake((url_settings, success_data," +
                    " dataType_success, success) =>\n\t\t\t\tgetPostMock(url_settings, success_data, dataT" +
                    "ype_success, success, \"post\"));\n\t\t}\n");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t}\n\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 
		foreach (var model in templateModel.Models)
		{
	
            
            #line default
            #line hidden
            this.Write(" \n\ttype ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms =\n\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 foreach (var form in model.Forms) { 
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\" |  ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("null;\n\n\texport class ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write(" extends CrmEntityModel<");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("_Forms>\n\t{\n\t\tentityName = \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.EntityName)));
            
            #line default
            #line hidden
            this.Write("\";\n\t\tcontext = new Context(<Context>\n\t\t\t{\n\t\t\t\tuserId: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserId.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\n\t\t\t\tusername: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.Username))));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\tuserFullName: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.UserFullName))));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\tisGuidedHelpEnabled: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsGuidedHelpEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\tuserLanguageCode: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.UserLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\ttimeZoneBias: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.TimeZoneBias.ToString())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\tuserRoles:\n\t\t\t\t\t[\n\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

				foreach (var role in model.Context.UserRoles)
				{
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(role.ToString())));
            
            #line default
            #line hidden
            this.Write("\",\n\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("\t\t],\n\t\t\t\torganisationUrl: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationUrl)));
            
            #line default
            #line hidden
            this.Write("\",\n\t\t\t\tisAutoSaveEnabled: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.IsAutoSaveEnabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\torgLanguageCode: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrgLanguageCode.ToString())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\torganisationName: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.OrganisationName)));
            
            #line default
            #line hidden
            this.Write("\",\n\t\t\t\tthemeName: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(model.Context.ThemeName))));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\tcrmVersion: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(model.Context.CrmVersion)));
            
            #line default
            #line hidden
            this.Write("\"\n\t\t\t});\n\t\tcrmAttributes =\n\t\t\t[\n\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

				foreach (var attribute in model.CrmAttributes)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew CrmAttribute(<CrmAttribute>\n\t\t\t\t\t{\n\t\t\t\t\t\tattributeType: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.AttributeType)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Name)));
            
            #line default
            #line hidden
            this.Write("\", requiredLevel: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.RequiredLevel, "none")));
            
            #line default
            #line hidden
            this.Write("\", format: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Format)));
            
            #line default
            #line hidden
            this.Write("\",\n\t\t\t\t\t\tmin: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Min?.ToString().Replace(",",".") ?? "null")));
            
            #line default
            #line hidden
            this.Write(", max: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Max?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", precision: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.Precision?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\tmaxLength: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.MaxLength?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\tdefaultBoolValue: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.DefaultBoolValue?.ToString().ToLower() ?? "null")));
            
            #line default
            #line hidden
            this.Write(", initialValue: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(attribute.InitialValue?.ToString() ?? "null")));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\toptions: new Map(\n\t\t\t\t\t\t\t[\n\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

					if (attribute.Options != null) {
					foreach (var option in attribute.Options)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\t[");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(option.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\t\t\t\tnew Map(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

						foreach (var label in option.Value)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t[");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(label.Key.ToString())));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\n\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t])\n\t\t\t\t\t\t\t\t],\n\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

					}
					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t])\n\t\t\t\t\t}),\n\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\n\t\tforms =\n\t\t\t[\n\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

				foreach (var form in model.Forms)
				{
			
            
            #line default
            #line hidden
            this.Write("\tnew Form(<Form>\n\t\t\t\t\t{\n\t\t\t\t\t\tid: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Id)));
            
            #line default
            #line hidden
            this.Write("\", name: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(form.Name)));
            
            #line default
            #line hidden
            this.Write("\",\n\t\t\t\t\t\ttabs:\n\t\t\t\t\t\t\t[\n\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

					foreach (var tab in form.Tabs)
					{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\tnew Tab(<Tab>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(tab.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\t\t\t\t\tlabels: new Map(\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

						foreach (var label in tab.Labels)
						{
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t[");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\n\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

						}
					
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\tsections:\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

							foreach (var section in tab.Sections)
							{
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tnew Section(<Section>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.Id)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(section.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

								foreach (var label in section.Labels)
								{
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t[");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\n\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

								}
							
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrols:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<FieldControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew FieldControl(<FieldControl>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname" +
                    ": \"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(", isDisabled: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsDisabled.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

									foreach (var control in section.Controls.OfType<GridControl>())
									{
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\tnew GridControl(<GridControl>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: " +
                    "\"");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.Name)));
            
            #line default
            #line hidden
            this.Write("\", isVisible: ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CheckString(control.IsVisible.ToString().ToLower())));
            
            #line default
            #line hidden
            this.Write(",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: new Map(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

										foreach (var label in control.Labels)
										{
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t[");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(label.Key));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToLiteral(CheckString(label.Value))));
            
            #line default
            #line hidden
            this.Write("],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

										}
									
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

									}
								
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

							}
						
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

					}
				
            
            #line default
            #line hidden
            this.Write("\t\t\t]\n\t\t\t\t\t}),\n\t\t\t");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

				}
			
            
            #line default
            #line hidden
            this.Write("];\n\t}\n");
            
            #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

		}

            
            #line default
            #line hidden
            this.Write("}\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"

    // Credit :http://stackoverflow.com/questions/323640/can-i-convert-a-c-sharp-string-value-to-an-escaped-string-literal
    private static string ToLiteral(string input)
    {
        using (var writer = new StringWriter())
        {
            using (var provider = CodeDomProvider.CreateProvider("CSharp"))
            {
                provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
                return writer.ToString();
            }
        }
    }

	public string CheckString(string value, string defaultValue = "null")
	{
		return value ?? defaultValue;
	}

        
        #line default
        #line hidden
        
        #line 1 "D:\workspace\DynamicsCrm-xrm-mock-Generator-master\xrm-mock-Generator\XrmMockGeneratorTemplate.tt"
        // this.Write("\n");

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class XrmMockGeneratorTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
